//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from CPlus.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using CPlus.Exceptions;

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class CPlusLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, LINE_CMT=2, BLOCK_CMT=3, BOOLEAN=4, CLASS=5, PUBLIC=6, PRIVATE=7, 
		FLOAT=8, INT=9, NEW=10, STRING=11, RETURN=12, VOID=13, ADD=14, SUB=15, 
		MUL=16, DIV=17, NOT=18, ASSIGN=19, NOT_EQUAL=20, EQUAL=21, LSB=22, RSB=23, 
		LP=24, RP=25, LB=26, RB=27, SM=28, CL=29, DOT=30, CM=31, BOOLLIT=32, STRINGLIT=33, 
		FLOATLIT=34, INTLIT=35, ID=36, UNCLOSE_STRING=37, ILLEGAL_ESCAPE=38, WS=39, 
		NEWLINE=40, ERROR_CHAR=41;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "LINE_CMT", "BLOCK_CMT", "BOOLEAN", "CLASS", "PUBLIC", "PRIVATE", 
		"FLOAT", "INT", "NEW", "STRING", "RETURN", "VOID", "ADD", "SUB", "MUL", 
		"DIV", "NOT", "ASSIGN", "NOT_EQUAL", "EQUAL", "LSB", "RSB", "LP", "RP", 
		"LB", "RB", "SM", "CL", "DOT", "CM", "BOOLLIT", "STRINGLIT", "FLOATLIT", 
		"INTLIT", "ID", "UNCLOSE_STRING", "ILLEGAL_ESCAPE", "DIGIT", "STR_CHAR", 
		"ESC_SEQ", "ESC_ILLEGAL", "WS", "NEWLINE", "ERROR_CHAR"
	};


	public CPlusLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public CPlusLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'bool'", null, null, "'boolean'", "'class'", "'public'", "'private'", 
		"'float'", "'int'", "'new'", "'string'", "'return'", "'void'", "'+'", 
		"'-'", "'*'", "'/'", "'!'", "'='", "'!='", "'=='", "'['", "']'", "'{'", 
		"'}'", "'('", "')'", "';'", "':'", "'.'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "LINE_CMT", "BLOCK_CMT", "BOOLEAN", "CLASS", "PUBLIC", "PRIVATE", 
		"FLOAT", "INT", "NEW", "STRING", "RETURN", "VOID", "ADD", "SUB", "MUL", 
		"DIV", "NOT", "ASSIGN", "NOT_EQUAL", "EQUAL", "LSB", "RSB", "LP", "RP", 
		"LB", "RB", "SM", "CL", "DOT", "CM", "BOOLLIT", "STRINGLIT", "FLOATLIT", 
		"INTLIT", "ID", "UNCLOSE_STRING", "ILLEGAL_ESCAPE", "WS", "NEWLINE", "ERROR_CHAR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CPlus.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CPlusLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	public override void Action(RuleContext _localctx, int ruleIndex, int actionIndex) {
		switch (ruleIndex) {
		case 32 : STRINGLIT_action(_localctx, actionIndex); break;
		case 36 : UNCLOSE_STRING_action(_localctx, actionIndex); break;
		case 37 : ILLEGAL_ESCAPE_action(_localctx, actionIndex); break;
		case 44 : ERROR_CHAR_action(_localctx, actionIndex); break;
		}
	}
	private void STRINGLIT_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 0: 
		          Text = Text.Substring(1, Text.Length - 2);
		       break;
		}
	}
	private void UNCLOSE_STRING_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 1: 
		          throw new UncloseStringException(Text);
		       break;
		}
	}
	private void ILLEGAL_ESCAPE_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 2: 
		          throw new IllegalEscapeException(Text);
		       break;
		}
	}
	private void ERROR_CHAR_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 3: 
				throw new ErrorTokenException(this.Text);
			 break;
		}
	}

	private static int[] _serializedATN = {
		4,0,41,322,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,1,0,1,0,1,0,1,0,1,0,1,1,1,1,5,1,99,8,1,10,1,12,
		1,102,9,1,1,1,1,1,1,2,1,2,1,2,1,2,5,2,110,8,2,10,2,12,2,113,9,2,1,2,1,
		2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,
		1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,
		7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,
		1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,
		1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,
		1,19,1,20,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,
		1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,31,1,31,
		1,31,1,31,1,31,1,31,1,31,3,31,229,8,31,1,32,1,32,5,32,233,8,32,10,32,12,
		32,236,9,32,1,32,1,32,1,32,1,33,4,33,242,8,33,11,33,12,33,243,1,33,1,33,
		1,33,4,33,249,8,33,11,33,12,33,250,1,33,1,33,4,33,255,8,33,11,33,12,33,
		256,3,33,259,8,33,1,34,4,34,262,8,34,11,34,12,34,263,1,35,1,35,5,35,268,
		8,35,10,35,12,35,271,9,35,1,36,1,36,5,36,275,8,36,10,36,12,36,278,9,36,
		1,36,1,36,1,37,1,37,5,37,284,8,37,10,37,12,37,287,9,37,1,37,1,37,1,37,
		1,38,1,38,1,39,1,39,3,39,296,8,39,1,40,1,40,1,40,1,41,1,41,1,41,3,41,304,
		8,41,1,42,4,42,307,8,42,11,42,12,42,308,1,42,1,42,1,43,4,43,314,8,43,11,
		43,12,43,315,1,43,1,43,1,44,1,44,1,44,1,111,0,45,1,1,3,2,5,3,7,4,9,5,11,
		6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
		37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,
		61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,0,79,0,81,0,83,0,85,
		39,87,40,89,41,1,0,7,2,0,10,10,13,13,3,0,65,90,95,95,97,122,4,0,48,57,
		65,90,95,95,97,122,1,0,48,57,4,0,8,10,12,13,34,34,92,92,7,0,34,34,92,92,
		98,98,102,102,110,110,114,114,116,116,3,0,9,9,12,13,32,32,333,0,1,1,0,
		0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
		1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,
		0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,
		1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,
		0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,
		1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,
		0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,85,1,0,0,0,0,87,
		1,0,0,0,0,89,1,0,0,0,1,91,1,0,0,0,3,96,1,0,0,0,5,105,1,0,0,0,7,119,1,0,
		0,0,9,127,1,0,0,0,11,133,1,0,0,0,13,140,1,0,0,0,15,148,1,0,0,0,17,154,
		1,0,0,0,19,158,1,0,0,0,21,162,1,0,0,0,23,169,1,0,0,0,25,176,1,0,0,0,27,
		181,1,0,0,0,29,183,1,0,0,0,31,185,1,0,0,0,33,187,1,0,0,0,35,189,1,0,0,
		0,37,191,1,0,0,0,39,193,1,0,0,0,41,196,1,0,0,0,43,199,1,0,0,0,45,201,1,
		0,0,0,47,203,1,0,0,0,49,205,1,0,0,0,51,207,1,0,0,0,53,209,1,0,0,0,55,211,
		1,0,0,0,57,213,1,0,0,0,59,215,1,0,0,0,61,217,1,0,0,0,63,228,1,0,0,0,65,
		230,1,0,0,0,67,258,1,0,0,0,69,261,1,0,0,0,71,265,1,0,0,0,73,272,1,0,0,
		0,75,281,1,0,0,0,77,291,1,0,0,0,79,295,1,0,0,0,81,297,1,0,0,0,83,303,1,
		0,0,0,85,306,1,0,0,0,87,313,1,0,0,0,89,319,1,0,0,0,91,92,5,98,0,0,92,93,
		5,111,0,0,93,94,5,111,0,0,94,95,5,108,0,0,95,2,1,0,0,0,96,100,5,35,0,0,
		97,99,8,0,0,0,98,97,1,0,0,0,99,102,1,0,0,0,100,98,1,0,0,0,100,101,1,0,
		0,0,101,103,1,0,0,0,102,100,1,0,0,0,103,104,6,1,0,0,104,4,1,0,0,0,105,
		106,5,47,0,0,106,107,5,42,0,0,107,111,1,0,0,0,108,110,9,0,0,0,109,108,
		1,0,0,0,110,113,1,0,0,0,111,112,1,0,0,0,111,109,1,0,0,0,112,114,1,0,0,
		0,113,111,1,0,0,0,114,115,5,42,0,0,115,116,5,47,0,0,116,117,1,0,0,0,117,
		118,6,2,0,0,118,6,1,0,0,0,119,120,5,98,0,0,120,121,5,111,0,0,121,122,5,
		111,0,0,122,123,5,108,0,0,123,124,5,101,0,0,124,125,5,97,0,0,125,126,5,
		110,0,0,126,8,1,0,0,0,127,128,5,99,0,0,128,129,5,108,0,0,129,130,5,97,
		0,0,130,131,5,115,0,0,131,132,5,115,0,0,132,10,1,0,0,0,133,134,5,112,0,
		0,134,135,5,117,0,0,135,136,5,98,0,0,136,137,5,108,0,0,137,138,5,105,0,
		0,138,139,5,99,0,0,139,12,1,0,0,0,140,141,5,112,0,0,141,142,5,114,0,0,
		142,143,5,105,0,0,143,144,5,118,0,0,144,145,5,97,0,0,145,146,5,116,0,0,
		146,147,5,101,0,0,147,14,1,0,0,0,148,149,5,102,0,0,149,150,5,108,0,0,150,
		151,5,111,0,0,151,152,5,97,0,0,152,153,5,116,0,0,153,16,1,0,0,0,154,155,
		5,105,0,0,155,156,5,110,0,0,156,157,5,116,0,0,157,18,1,0,0,0,158,159,5,
		110,0,0,159,160,5,101,0,0,160,161,5,119,0,0,161,20,1,0,0,0,162,163,5,115,
		0,0,163,164,5,116,0,0,164,165,5,114,0,0,165,166,5,105,0,0,166,167,5,110,
		0,0,167,168,5,103,0,0,168,22,1,0,0,0,169,170,5,114,0,0,170,171,5,101,0,
		0,171,172,5,116,0,0,172,173,5,117,0,0,173,174,5,114,0,0,174,175,5,110,
		0,0,175,24,1,0,0,0,176,177,5,118,0,0,177,178,5,111,0,0,178,179,5,105,0,
		0,179,180,5,100,0,0,180,26,1,0,0,0,181,182,5,43,0,0,182,28,1,0,0,0,183,
		184,5,45,0,0,184,30,1,0,0,0,185,186,5,42,0,0,186,32,1,0,0,0,187,188,5,
		47,0,0,188,34,1,0,0,0,189,190,5,33,0,0,190,36,1,0,0,0,191,192,5,61,0,0,
		192,38,1,0,0,0,193,194,5,33,0,0,194,195,5,61,0,0,195,40,1,0,0,0,196,197,
		5,61,0,0,197,198,5,61,0,0,198,42,1,0,0,0,199,200,5,91,0,0,200,44,1,0,0,
		0,201,202,5,93,0,0,202,46,1,0,0,0,203,204,5,123,0,0,204,48,1,0,0,0,205,
		206,5,125,0,0,206,50,1,0,0,0,207,208,5,40,0,0,208,52,1,0,0,0,209,210,5,
		41,0,0,210,54,1,0,0,0,211,212,5,59,0,0,212,56,1,0,0,0,213,214,5,58,0,0,
		214,58,1,0,0,0,215,216,5,46,0,0,216,60,1,0,0,0,217,218,5,44,0,0,218,62,
		1,0,0,0,219,220,5,116,0,0,220,221,5,114,0,0,221,222,5,117,0,0,222,229,
		5,101,0,0,223,224,5,102,0,0,224,225,5,97,0,0,225,226,5,108,0,0,226,227,
		5,115,0,0,227,229,5,101,0,0,228,219,1,0,0,0,228,223,1,0,0,0,229,64,1,0,
		0,0,230,234,5,34,0,0,231,233,3,79,39,0,232,231,1,0,0,0,233,236,1,0,0,0,
		234,232,1,0,0,0,234,235,1,0,0,0,235,237,1,0,0,0,236,234,1,0,0,0,237,238,
		5,34,0,0,238,239,6,32,1,0,239,66,1,0,0,0,240,242,3,77,38,0,241,240,1,0,
		0,0,242,243,1,0,0,0,243,241,1,0,0,0,243,244,1,0,0,0,244,245,1,0,0,0,245,
		246,3,59,29,0,246,259,1,0,0,0,247,249,3,77,38,0,248,247,1,0,0,0,249,250,
		1,0,0,0,250,248,1,0,0,0,250,251,1,0,0,0,251,252,1,0,0,0,252,254,3,59,29,
		0,253,255,3,77,38,0,254,253,1,0,0,0,255,256,1,0,0,0,256,254,1,0,0,0,256,
		257,1,0,0,0,257,259,1,0,0,0,258,241,1,0,0,0,258,248,1,0,0,0,259,68,1,0,
		0,0,260,262,3,77,38,0,261,260,1,0,0,0,262,263,1,0,0,0,263,261,1,0,0,0,
		263,264,1,0,0,0,264,70,1,0,0,0,265,269,7,1,0,0,266,268,7,2,0,0,267,266,
		1,0,0,0,268,271,1,0,0,0,269,267,1,0,0,0,269,270,1,0,0,0,270,72,1,0,0,0,
		271,269,1,0,0,0,272,276,5,34,0,0,273,275,3,79,39,0,274,273,1,0,0,0,275,
		278,1,0,0,0,276,274,1,0,0,0,276,277,1,0,0,0,277,279,1,0,0,0,278,276,1,
		0,0,0,279,280,6,36,2,0,280,74,1,0,0,0,281,285,5,34,0,0,282,284,3,79,39,
		0,283,282,1,0,0,0,284,287,1,0,0,0,285,283,1,0,0,0,285,286,1,0,0,0,286,
		288,1,0,0,0,287,285,1,0,0,0,288,289,3,83,41,0,289,290,6,37,3,0,290,76,
		1,0,0,0,291,292,7,3,0,0,292,78,1,0,0,0,293,296,8,4,0,0,294,296,3,81,40,
		0,295,293,1,0,0,0,295,294,1,0,0,0,296,80,1,0,0,0,297,298,5,92,0,0,298,
		299,7,5,0,0,299,82,1,0,0,0,300,301,5,92,0,0,301,304,8,5,0,0,302,304,5,
		92,0,0,303,300,1,0,0,0,303,302,1,0,0,0,304,84,1,0,0,0,305,307,7,6,0,0,
		306,305,1,0,0,0,307,308,1,0,0,0,308,306,1,0,0,0,308,309,1,0,0,0,309,310,
		1,0,0,0,310,311,6,42,0,0,311,86,1,0,0,0,312,314,5,10,0,0,313,312,1,0,0,
		0,314,315,1,0,0,0,315,313,1,0,0,0,315,316,1,0,0,0,316,317,1,0,0,0,317,
		318,6,43,0,0,318,88,1,0,0,0,319,320,9,0,0,0,320,321,6,44,4,0,321,90,1,
		0,0,0,17,0,100,111,228,234,243,250,256,258,263,269,276,285,295,303,308,
		315,5,6,0,0,1,32,0,1,36,1,1,37,2,1,44,3
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
